// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module coloringFB_i1_coloringFB_i1_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_1_TREADY,
        Output_1_TDATA,
        Output_1_TVALID,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address1,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce1,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q1,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q0,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address1,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce1,
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   Output_1_TREADY;
output  [31:0] Output_1_TDATA;
output   Output_1_TVALID;
output  [14:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address0;
output   coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce0;
input  [7:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q0;
output  [14:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address1;
output   coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce1;
input  [7:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q1;
output  [14:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address0;
output   coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce0;
input  [7:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q0;
output  [14:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address1;
output   coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce1;
input  [7:0] coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q1;

reg ap_idle;
reg Output_1_TVALID;
reg coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce0;
reg coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce1;
reg coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce0;
reg coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_149_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Output_1_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln232_fu_219_p1;
wire   [63:0] zext_ln232_1_fu_239_p1;
reg   [8:0] j_fu_62;
wire   [8:0] add_ln46_fu_245_p2;
wire    ap_loop_init;
reg   [8:0] i_fu_66;
wire   [8:0] select_ln45_1_fu_189_p3;
reg   [14:0] indvar_flatten_fu_70;
wire   [14:0] add_ln45_1_fu_155_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_173_p3;
wire   [8:0] add_ln45_fu_167_p2;
wire   [8:0] select_ln45_fu_181_p3;
wire   [7:0] trunc_ln47_fu_197_p1;
wire   [6:0] lshr_ln1_fu_201_p4;
wire   [14:0] tmp_s_fu_211_p3;
wire   [6:0] or_ln232_fu_225_p2;
wire   [14:0] tmp_1_fu_231_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

coloringFB_i1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 9'd0;
        end else if (((icmp_ln45_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_66 <= select_ln45_1_fu_189_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 15'd0;
        end else if (((icmp_ln45_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln45_1_fu_155_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 9'd0;
        end else if (((icmp_ln45_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_62 <= add_ln46_fu_245_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Output_1_TDATA_blk_n = Output_1_TREADY;
    end else begin
        Output_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Output_1_TVALID = 1'b1;
    end else begin
        Output_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_149_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce0 = 1'b1;
    end else begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce1 = 1'b1;
    end else begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce0 = 1'b1;
    end else begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce1 = 1'b1;
    end else begin
        coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_TDATA = {{{{coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q0}, {coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q0}}, {coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_q1}}, {coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_q1}};

assign add_ln45_1_fu_155_p2 = (indvar_flatten_fu_70 + 15'd1);

assign add_ln45_fu_167_p2 = (i_fu_66 + 9'd1);

assign add_ln46_fu_245_p2 = (select_ln45_fu_181_p3 + 9'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == Output_1_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Output_1_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Output_1_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == Output_1_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address0 = zext_ln232_1_fu_239_p1;

assign coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_1_address1 = zext_ln232_fu_219_p1;

assign coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address0 = zext_ln232_1_fu_239_p1;

assign coloringFB_i1_stream_ap_uint_32_0_stream_ap_uint_32_0_frame_buffer_address1 = zext_ln232_fu_219_p1;

assign icmp_ln45_fu_149_p2 = ((indvar_flatten_fu_70 == 15'd16384) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_201_p4 = {{select_ln45_fu_181_p3[7:1]}};

assign or_ln232_fu_225_p2 = (lshr_ln1_fu_201_p4 | 7'd1);

assign select_ln45_1_fu_189_p3 = ((tmp_fu_173_p3[0:0] == 1'b1) ? add_ln45_fu_167_p2 : i_fu_66);

assign select_ln45_fu_181_p3 = ((tmp_fu_173_p3[0:0] == 1'b1) ? 9'd0 : j_fu_62);

assign tmp_1_fu_231_p3 = {{trunc_ln47_fu_197_p1}, {or_ln232_fu_225_p2}};

assign tmp_fu_173_p3 = j_fu_62[32'd8];

assign tmp_s_fu_211_p3 = {{trunc_ln47_fu_197_p1}, {lshr_ln1_fu_201_p4}};

assign trunc_ln47_fu_197_p1 = select_ln45_1_fu_189_p3[7:0];

assign zext_ln232_1_fu_239_p1 = tmp_1_fu_231_p3;

assign zext_ln232_fu_219_p1 = tmp_s_fu_211_p3;

endmodule //coloringFB_i1_coloringFB_i1_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2
