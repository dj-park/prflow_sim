// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module prj_rast1_data_transfer (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_TDATA,
        Input_1_TVALID,
        Input_1_TREADY,
        data_transfer_out_din,
        data_transfer_out_num_data_valid,
        data_transfer_out_fifo_cap,
        data_transfer_out_full_n,
        data_transfer_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] Input_1_TDATA;
input   Input_1_TVALID;
output   Input_1_TREADY;
output  [127:0] data_transfer_out_din;
input  [1:0] data_transfer_out_num_data_valid;
input  [1:0] data_transfer_out_fifo_cap;
input   data_transfer_out_full_n;
output   data_transfer_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_transfer_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [7:0] counter_V;
reg   [255:0] in_tmp_V;
reg    Input_1_TDATA_blk_n;
wire   [0:0] icmp_ln1065_fu_65_p2;
reg    data_transfer_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [127:0] trunc_ln404_fu_201_p1;
reg   [127:0] trunc_ln404_reg_234;
wire   [7:0] select_ln85_fu_217_p3;
reg    ap_block_state1;
reg   [255:0] ap_sig_allocacmp_p_Val2_s;
wire   [14:0] Lo_fu_81_p3;
wire   [14:0] Hi_fu_89_p2;
wire   [1:0] trunc_ln598_fu_77_p1;
wire   [8:0] tmp_3_fu_105_p3;
wire   [8:0] trunc_ln674_fu_113_p1;
wire   [0:0] icmp_ln674_fu_99_p2;
wire   [8:0] sub_ln674_fu_127_p2;
wire   [8:0] sub_ln674_2_fu_139_p2;
reg   [255:0] tmp_4_fu_117_p4;
wire   [8:0] sub_ln674_1_fu_133_p2;
wire   [8:0] select_ln674_fu_145_p3;
wire   [8:0] select_ln674_2_fu_161_p3;
wire   [8:0] sub_ln674_3_fu_169_p2;
wire   [255:0] select_ln674_1_fu_153_p3;
wire   [255:0] zext_ln674_fu_175_p1;
wire   [255:0] zext_ln674_1_fu_179_p1;
wire   [255:0] lshr_ln674_fu_183_p2;
wire   [255:0] lshr_ln674_1_fu_189_p2;
wire   [255:0] p_Result_s_fu_195_p2;
wire   [0:0] icmp_ln1065_1_fu_205_p2;
wire   [7:0] add_ln886_fu_211_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    regslice_both_Input_1_U_apdone_blk;
wire   [255:0] Input_1_TDATA_int_regslice;
wire    Input_1_TVALID_int_regslice;
reg    Input_1_TREADY_int_regslice;
wire    regslice_both_Input_1_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 counter_V = 8'd0;
#0 in_tmp_V = 256'd0;
end

prj_rast1_regslice_both #(
    .DataWidth( 256 ))
regslice_both_Input_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Input_1_TDATA),
    .vld_in(Input_1_TVALID),
    .ack_in(regslice_both_Input_1_U_ack_in),
    .data_out(Input_1_TDATA_int_regslice),
    .vld_out(Input_1_TVALID_int_regslice),
    .ack_out(Input_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((data_transfer_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice))) & (1'b1 == ap_CS_fsm_state1))) begin
        counter_V <= select_ln85_fu_217_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice))) & (icmp_ln1065_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_tmp_V <= Input_1_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln404_reg_234 <= trunc_ln404_fu_201_p1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln1065_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_TDATA_blk_n = Input_1_TVALID_int_regslice;
    end else begin
        Input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice))) & (icmp_ln1065_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data_transfer_out_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((data_transfer_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_Val2_s = Input_1_TDATA_int_regslice;
    end else begin
        ap_sig_allocacmp_p_Val2_s = in_tmp_V;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_transfer_out_blk_n = data_transfer_out_full_n;
    end else begin
        data_transfer_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_transfer_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_transfer_out_write = 1'b1;
    end else begin
        data_transfer_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((data_transfer_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data_transfer_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_fu_89_p2 = (15'd127 | Lo_fu_81_p3);

assign Input_1_TREADY = regslice_both_Input_1_U_ack_in;

assign Lo_fu_81_p3 = {{counter_V}, {7'd0}};

assign add_ln886_fu_211_p2 = (counter_V + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln1065_fu_65_p2 == 1'd1) & (1'b0 == Input_1_TVALID_int_regslice)));
end

assign ap_ready = internal_ap_ready;

assign data_transfer_out_din = trunc_ln404_reg_234;

assign icmp_ln1065_1_fu_205_p2 = ((counter_V == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_65_p2 = ((counter_V == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_99_p2 = ((Lo_fu_81_p3 > Hi_fu_89_p2) ? 1'b1 : 1'b0);

assign lshr_ln674_1_fu_189_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln674_1_fu_179_p1;

assign lshr_ln674_fu_183_p2 = select_ln674_1_fu_153_p3 >> zext_ln674_fu_175_p1;

assign p_Result_s_fu_195_p2 = (lshr_ln674_fu_183_p2 & lshr_ln674_1_fu_189_p2);

assign select_ln674_1_fu_153_p3 = ((icmp_ln674_fu_99_p2[0:0] == 1'b1) ? tmp_4_fu_117_p4 : ap_sig_allocacmp_p_Val2_s);

assign select_ln674_2_fu_161_p3 = ((icmp_ln674_fu_99_p2[0:0] == 1'b1) ? sub_ln674_1_fu_133_p2 : tmp_3_fu_105_p3);

assign select_ln674_fu_145_p3 = ((icmp_ln674_fu_99_p2[0:0] == 1'b1) ? sub_ln674_fu_127_p2 : sub_ln674_2_fu_139_p2);

assign select_ln85_fu_217_p3 = ((icmp_ln1065_1_fu_205_p2[0:0] == 1'b1) ? 8'd0 : add_ln886_fu_211_p2);

assign start_out = real_start;

assign sub_ln674_1_fu_133_p2 = (9'd255 - tmp_3_fu_105_p3);

assign sub_ln674_2_fu_139_p2 = (trunc_ln674_fu_113_p1 - tmp_3_fu_105_p3);

assign sub_ln674_3_fu_169_p2 = (9'd255 - select_ln674_fu_145_p3);

assign sub_ln674_fu_127_p2 = (tmp_3_fu_105_p3 - trunc_ln674_fu_113_p1);

assign tmp_3_fu_105_p3 = {{trunc_ln598_fu_77_p1}, {7'd0}};

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_p_Val2_s) begin
    for (ap_tvar_int_0 = 256 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 255 - 0) begin
            tmp_4_fu_117_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_4_fu_117_p4[ap_tvar_int_0] = ap_sig_allocacmp_p_Val2_s[255 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln404_fu_201_p1 = p_Result_s_fu_195_p2[127:0];

assign trunc_ln598_fu_77_p1 = counter_V[1:0];

assign trunc_ln674_fu_113_p1 = Hi_fu_89_p2[8:0];

assign zext_ln674_1_fu_179_p1 = sub_ln674_3_fu_169_p2;

assign zext_ln674_fu_175_p1 = select_ln674_2_fu_161_p3;

endmodule //prj_rast1_data_transfer
