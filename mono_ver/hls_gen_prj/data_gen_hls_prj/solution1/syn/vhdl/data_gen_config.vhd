-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity data_gen_config is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Output_1_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    Output_1_TVALID : OUT STD_LOGIC;
    Output_1_TREADY : IN STD_LOGIC;
    Output_2_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    Output_2_TVALID : OUT STD_LOGIC;
    Output_2_TREADY : IN STD_LOGIC );
end;


architecture behav of data_gen_config is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "data_gen_config_data_gen_config,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.339250,HLS_SYN_LAT=807,HLS_SYN_TPT=none,HLS_SYN_MEM=54,HLS_SYN_DSP=0,HLS_SYN_FF=22,HLS_SYN_LUT=208,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_31E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100011110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Output_1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_idle : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_ready : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TREADY : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TVALID : STD_LOGIC;
    signal grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal regslice_both_Output_1_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_2_U_apdone_blk : STD_LOGIC;
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal Output_1_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal Output_1_TVALID_int_regslice : STD_LOGIC;
    signal Output_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Output_1_U_vld_out : STD_LOGIC;
    signal Output_2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Output_2_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component data_gen_config_data_gen_config_Pipeline_data_gen_label0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Output_2_TREADY : IN STD_LOGIC;
        Output_2_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        Output_2_TVALID : OUT STD_LOGIC );
    end component;


    component data_gen_config_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_data_gen_config_Pipeline_data_gen_label0_fu_70 : component data_gen_config_data_gen_config_Pipeline_data_gen_label0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start,
        ap_done => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done,
        ap_idle => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_idle,
        ap_ready => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_ready,
        Output_2_TREADY => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TREADY,
        Output_2_TDATA => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TDATA,
        Output_2_TVALID => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TVALID);

    regslice_both_Output_1_U : component data_gen_config_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Output_1_TDATA_int_regslice,
        vld_in => Output_1_TVALID_int_regslice,
        ack_in => Output_1_TREADY_int_regslice,
        data_out => Output_1_TDATA,
        vld_out => regslice_both_Output_1_U_vld_out,
        ack_out => Output_1_TREADY,
        apdone_blk => regslice_both_Output_1_U_apdone_blk);

    regslice_both_Output_2_U : component data_gen_config_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TDATA,
        vld_in => grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TVALID,
        ack_in => Output_2_TREADY_int_regslice,
        data_out => Output_2_TDATA,
        vld_out => regslice_both_Output_2_U_vld_out,
        ack_out => Output_2_TREADY,
        apdone_blk => regslice_both_Output_2_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then 
                    grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state8, regslice_both_Output_1_U_apdone_blk, regslice_both_Output_2_U_apdone_blk, Output_1_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = Output_1_TREADY_int_regslice) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((regslice_both_Output_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_Output_1_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    Output_1_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, Output_1_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            Output_1_TDATA_blk_n <= Output_1_TREADY_int_regslice;
        else 
            Output_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Output_1_TDATA_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, Output_1_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then 
            Output_1_TDATA_int_regslice <= ap_const_lv64_18;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then 
            Output_1_TDATA_int_regslice <= ap_const_lv64_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then 
            Output_1_TDATA_int_regslice <= ap_const_lv64_7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Output_1_TREADY_int_regslice))) then 
            Output_1_TDATA_int_regslice <= ap_const_lv64_31E;
        elsif ((not(((ap_const_logic_0 = Output_1_TREADY_int_regslice) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output_1_TDATA_int_regslice <= ap_const_lv64_0;
        else 
            Output_1_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Output_1_TVALID <= regslice_both_Output_1_U_vld_out;

    Output_1_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, Output_1_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = Output_1_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = Output_1_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = Output_1_TREADY_int_regslice)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Output_1_TREADY_int_regslice)) or (not(((ap_const_logic_0 = Output_1_TREADY_int_regslice) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Output_1_TVALID_int_regslice <= ap_const_logic_1;
        else 
            Output_1_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    Output_2_TVALID <= regslice_both_Output_2_U_vld_out;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, Output_1_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = Output_1_TREADY_int_regslice) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(Output_1_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Output_1_TREADY_int_regslice)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(Output_1_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Output_1_TREADY_int_regslice)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(Output_1_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Output_1_TREADY_int_regslice)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(Output_1_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Output_1_TREADY_int_regslice)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(Output_1_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Output_1_TREADY_int_regslice)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done)
    begin
        if ((grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(regslice_both_Output_1_U_apdone_blk, regslice_both_Output_2_U_apdone_blk)
    begin
        if (((regslice_both_Output_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_Output_1_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, Output_1_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = Output_1_TREADY_int_regslice) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(regslice_both_Output_1_U_apdone_blk, regslice_both_Output_2_U_apdone_blk)
    begin
                ap_block_state8 <= ((regslice_both_Output_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_Output_1_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, regslice_both_Output_1_U_apdone_blk, regslice_both_Output_2_U_apdone_blk)
    begin
        if ((not(((regslice_both_Output_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_Output_1_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, regslice_both_Output_1_U_apdone_blk, regslice_both_Output_2_U_apdone_blk)
    begin
        if ((not(((regslice_both_Output_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_Output_1_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_data_gen_config_Pipeline_data_gen_label0_fu_70_Output_2_TREADY <= (ap_CS_fsm_state7 and Output_2_TREADY_int_regslice);
    grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start <= grp_data_gen_config_Pipeline_data_gen_label0_fu_70_ap_start_reg;
end behav;
