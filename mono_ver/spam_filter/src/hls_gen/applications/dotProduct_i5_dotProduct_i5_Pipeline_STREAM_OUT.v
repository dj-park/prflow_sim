// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dotProduct_i5_dotProduct_i5_Pipeline_STREAM_OUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_2_TREADY,
        Output_2_TDATA,
        Output_2_TVALID,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_q0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_address0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_ce0,
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   Output_2_TREADY;
output  [63:0] Output_2_TDATA;
output   Output_2_TVALID;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_q0;
output  [4:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_address0;
output   dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_ce0;
input  [31:0] dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_q0;

reg ap_idle;
reg Output_2_TVALID;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_ce0;
reg dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln89_fu_191_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Output_2_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [1:0] trunc_ln92_fu_203_p1;
reg   [1:0] trunc_ln92_reg_300;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln640_fu_217_p1;
reg   [7:0] i_fu_68;
wire   [7:0] add_ln89_fu_197_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] lshr_ln1_fu_207_p4;
wire   [2:0] shl_ln1_fu_234_p3;
wire   [31:0] p_Val2_1_fu_261_p9;
wire   [31:0] p_Val2_s_fu_241_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dotProduct_i5_mux_73_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_73_32_1_1_U87(
    .din0(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_q0),
    .din1(32'd0),
    .din2(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_q0),
    .din3(32'd0),
    .din4(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_q0),
    .din5(32'd0),
    .din6(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_q0),
    .din7(shl_ln1_fu_234_p3),
    .dout(p_Val2_s_fu_241_p9)
);

dotProduct_i5_mux_73_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_73_32_1_1_U88(
    .din0(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_q0),
    .din1(32'd0),
    .din2(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_q0),
    .din3(32'd0),
    .din4(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_q0),
    .din5(32'd0),
    .din6(dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_q0),
    .din7(shl_ln1_fu_234_p3),
    .dout(p_Val2_1_fu_261_p9)
);

dotProduct_i5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_191_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= add_ln89_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln92_reg_300 <= trunc_ln92_fu_203_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_2_TDATA_blk_n = Output_2_TREADY;
    end else begin
        Output_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_2_TVALID = 1'b1;
    end else begin
        Output_2_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_191_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_ce0 = 1'b1;
    end else begin
        dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_2_TDATA = {{p_Val2_1_fu_261_p9}, {p_Val2_s_fu_241_p9}};

assign add_ln89_fu_197_p2 = (ap_sig_allocacmp_i_2 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == Output_2_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Output_2_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Output_2_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == Output_2_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_1_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_2_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_3_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_4_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_5_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_6_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_7_address0 = zext_ln640_fu_217_p1;

assign dotProduct_i5_stream_stream_stream_stream_ap_uint_64_0_param_address0 = zext_ln640_fu_217_p1;

assign icmp_ln89_fu_191_p2 = ((ap_sig_allocacmp_i_2 == 8'd128) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_207_p4 = {{ap_sig_allocacmp_i_2[6:2]}};

assign shl_ln1_fu_234_p3 = {{trunc_ln92_reg_300}, {1'd0}};

assign trunc_ln92_fu_203_p1 = ap_sig_allocacmp_i_2[1:0];

assign zext_ln640_fu_217_p1 = lshr_ln1_fu_207_p4;

endmodule //dotProduct_i5_dotProduct_i5_Pipeline_STREAM_OUT
