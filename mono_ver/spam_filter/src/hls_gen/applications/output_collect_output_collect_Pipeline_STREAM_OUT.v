// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_collect_output_collect_Pipeline_STREAM_OUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_1_TREADY,
        Output_1_TDATA,
        Output_1_TVALID,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address1,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce1,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q1,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q0,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address1,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce1,
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   Output_1_TREADY;
output  [255:0] Output_1_TDATA;
output   Output_1_TVALID;
output  [7:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address0;
output   output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce0;
input  [63:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q0;
output  [7:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address1;
output   output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce1;
input  [63:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q1;
output  [7:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address0;
output   output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce0;
input  [63:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q0;
output  [7:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address1;
output   output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce1;
input  [63:0] output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q1;

reg ap_idle;
reg Output_1_TVALID;
reg output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce0;
reg output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce1;
reg output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce0;
reg output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_225;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] counter;
reg    Output_1_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_fu_157_p3;
wire   [63:0] zext_ln232_fu_135_p1;
wire   [63:0] zext_ln232_1_fu_147_p1;
wire   [7:0] add_ln886_fu_165_p2;
reg   [7:0] i_fu_48;
wire   [7:0] add_ln42_fu_123_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] shl_ln232_fu_129_p2;
wire   [7:0] or_ln232_fu_141_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 counter = 8'd0;
#0 ap_done_reg = 1'b0;
end

output_collect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_117_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= add_ln42_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_157_p3 == 1'd0) & (icmp_ln42_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter <= add_ln886_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_225 <= counter[32'd7];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_225 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_1_TDATA_blk_n = Output_1_TREADY;
    end else begin
        Output_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_225 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_1_TVALID = 1'b1;
    end else begin
        Output_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_117_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce0 = 1'b1;
    end else begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce1 = 1'b1;
    end else begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce0 = 1'b1;
    end else begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce1 = 1'b1;
    end else begin
        output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_TDATA = {{{{output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q0}, {output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q0}}, {output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_q1}}, {output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_q1}};

assign add_ln42_fu_123_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign add_ln886_fu_165_p2 = (counter + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_reg_225 == 1'd0) & (1'b0 == Output_1_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_225 == 1'd0) & (1'b0 == Output_1_TREADY))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_225 == 1'd0) & (1'b0 == Output_1_TREADY))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((tmp_reg_225 == 1'd0) & (1'b0 == Output_1_TREADY));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_reg_225 == 1'd0) & (1'b0 == Output_1_TREADY));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln42_fu_117_p2 = ((ap_sig_allocacmp_i_1 == 8'd128) ? 1'b1 : 1'b0);

assign or_ln232_fu_141_p2 = (shl_ln232_fu_129_p2 | 8'd1);

assign output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address0 = zext_ln232_1_fu_147_p1;

assign output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_1_address1 = zext_ln232_fu_135_p1;

assign output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address0 = zext_ln232_1_fu_147_p1;

assign output_collect_stream_stream_stream_stream_stream_ap_uint_0_theta_address1 = zext_ln232_fu_135_p1;

assign shl_ln232_fu_129_p2 = ap_sig_allocacmp_i_1 << 8'd1;

assign tmp_fu_157_p3 = counter[32'd7];

assign zext_ln232_1_fu_147_p1 = or_ln232_fu_141_p2;

assign zext_ln232_fu_135_p1 = shl_ln232_fu_129_p2;

endmodule //output_collect_output_collect_Pipeline_STREAM_OUT
