// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sigmoid_sigmoid,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.854625,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=359,HLS_VERSION=2022_1}" *)

module sigmoid (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_TDATA,
        Input_1_TVALID,
        Input_1_TREADY,
        Input_2_TDATA,
        Input_2_TVALID,
        Input_2_TREADY,
        Input_3_TDATA,
        Input_3_TVALID,
        Input_3_TREADY,
        Input_4_TDATA,
        Input_4_TVALID,
        Input_4_TREADY,
        Output_1_TDATA,
        Output_1_TVALID,
        Output_1_TREADY,
        Output_2_TDATA,
        Output_2_TVALID,
        Output_2_TREADY,
        Output_3_TDATA,
        Output_3_TVALID,
        Output_3_TREADY,
        Output_4_TDATA,
        Output_4_TVALID,
        Output_4_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_TDATA;
input   Input_1_TVALID;
output   Input_1_TREADY;
input  [31:0] Input_2_TDATA;
input   Input_2_TVALID;
output   Input_2_TREADY;
input  [31:0] Input_3_TDATA;
input   Input_3_TVALID;
output   Input_3_TREADY;
input  [31:0] Input_4_TDATA;
input   Input_4_TVALID;
output   Input_4_TREADY;
output  [31:0] Output_1_TDATA;
output   Output_1_TVALID;
input   Output_1_TREADY;
output  [31:0] Output_2_TDATA;
output   Output_2_TVALID;
input   Output_2_TREADY;
output  [31:0] Output_3_TDATA;
output   Output_3_TVALID;
input   Output_3_TREADY;
output  [31:0] Output_4_TDATA;
output   Output_4_TVALID;
input   Output_4_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] lut_i_address0;
reg    lut_i_ce0;
wire   [9:0] lut_i_q0;
reg    Input_1_TDATA_blk_n;
reg    Input_2_TDATA_blk_n;
reg    Input_3_TDATA_blk_n;
reg    Input_4_TDATA_blk_n;
reg    Output_1_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    Output_2_TDATA_blk_n;
reg    Output_3_TDATA_blk_n;
reg    Output_4_TDATA_blk_n;
wire   [0:0] icmp_ln1695_fu_181_p2;
reg   [0:0] icmp_ln1695_reg_259;
wire   [0:0] icmp_ln1696_fu_187_p2;
reg   [0:0] icmp_ln1696_reg_265;
wire   [31:0] zext_ln2101_1_fu_251_p1;
wire   [63:0] zext_ln587_fu_203_p1;
reg    ap_block_state1;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [21:0] trunc_ln859_1_fu_133_p1;
wire   [21:0] trunc_ln859_fu_129_p1;
wire   [21:0] trunc_ln859_3_fu_147_p1;
wire   [21:0] trunc_ln859_2_fu_143_p1;
wire   [31:0] add_ln859_1_fu_151_p2;
wire   [31:0] add_ln859_fu_137_p2;
wire   [21:0] add_ln859_3_fu_163_p2;
wire   [21:0] add_ln859_2_fu_157_p2;
wire   [31:0] exponent_V_fu_169_p2;
wire   [21:0] add_ln2095_fu_175_p2;
wire   [10:0] index_V_fu_193_p4;
wire   [18:0] result_V_fu_208_p3;
wire   [0:0] xor_ln1695_fu_220_p2;
wire   [0:0] and_ln1696_fu_225_p2;
wire   [0:0] or_ln1696_fu_238_p2;
wire   [19:0] select_ln1696_fu_230_p3;
wire   [19:0] zext_ln2101_fu_216_p1;
wire   [19:0] result_V_2_fu_243_p3;
wire    regslice_both_Output_1_U_apdone_blk;
wire    regslice_both_Output_2_U_apdone_blk;
wire    regslice_both_Output_3_U_apdone_blk;
wire    regslice_both_Output_4_U_apdone_blk;
reg    ap_block_state3;
reg    ap_block_state3_io;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_Input_1_U_apdone_blk;
wire   [31:0] Input_1_TDATA_int_regslice;
wire    Input_1_TVALID_int_regslice;
reg    Input_1_TREADY_int_regslice;
wire    regslice_both_Input_1_U_ack_in;
wire    regslice_both_Input_2_U_apdone_blk;
wire   [31:0] Input_2_TDATA_int_regslice;
wire    Input_2_TVALID_int_regslice;
reg    Input_2_TREADY_int_regslice;
wire    regslice_both_Input_2_U_ack_in;
wire    regslice_both_Input_3_U_apdone_blk;
wire   [31:0] Input_3_TDATA_int_regslice;
wire    Input_3_TVALID_int_regslice;
reg    Input_3_TREADY_int_regslice;
wire    regslice_both_Input_3_U_ack_in;
wire    regslice_both_Input_4_U_apdone_blk;
wire   [31:0] Input_4_TDATA_int_regslice;
wire    Input_4_TVALID_int_regslice;
reg    Input_4_TREADY_int_regslice;
wire    regslice_both_Input_4_U_ack_in;
reg    Output_1_TVALID_int_regslice;
wire    Output_1_TREADY_int_regslice;
wire    regslice_both_Output_1_U_vld_out;
reg    Output_2_TVALID_int_regslice;
wire    Output_2_TREADY_int_regslice;
wire    regslice_both_Output_2_U_vld_out;
reg    Output_3_TVALID_int_regslice;
wire    Output_3_TREADY_int_regslice;
wire    regslice_both_Output_3_U_vld_out;
reg    Output_4_TVALID_int_regslice;
wire    Output_4_TREADY_int_regslice;
wire    regslice_both_Output_4_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

sigmoid_lut_i_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
lut_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_i_address0),
    .ce0(lut_i_ce0),
    .q0(lut_i_q0)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_TDATA),
    .vld_in(Input_1_TVALID),
    .ack_in(regslice_both_Input_1_U_ack_in),
    .data_out(Input_1_TDATA_int_regslice),
    .vld_out(Input_1_TVALID_int_regslice),
    .ack_out(Input_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_TDATA),
    .vld_in(Input_2_TVALID),
    .ack_in(regslice_both_Input_2_U_ack_in),
    .data_out(Input_2_TDATA_int_regslice),
    .vld_out(Input_2_TVALID_int_regslice),
    .ack_out(Input_2_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_3_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_3_TDATA),
    .vld_in(Input_3_TVALID),
    .ack_in(regslice_both_Input_3_U_ack_in),
    .data_out(Input_3_TDATA_int_regslice),
    .vld_out(Input_3_TVALID_int_regslice),
    .ack_out(Input_3_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_3_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_4_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_4_TDATA),
    .vld_in(Input_4_TVALID),
    .ack_in(regslice_both_Input_4_U_ack_in),
    .data_out(Input_4_TDATA_int_regslice),
    .vld_out(Input_4_TVALID_int_regslice),
    .ack_out(Input_4_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_4_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2101_1_fu_251_p1),
    .vld_in(Output_1_TVALID_int_regslice),
    .ack_in(Output_1_TREADY_int_regslice),
    .data_out(Output_1_TDATA),
    .vld_out(regslice_both_Output_1_U_vld_out),
    .ack_out(Output_1_TREADY),
    .apdone_blk(regslice_both_Output_1_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2101_1_fu_251_p1),
    .vld_in(Output_2_TVALID_int_regslice),
    .ack_in(Output_2_TREADY_int_regslice),
    .data_out(Output_2_TDATA),
    .vld_out(regslice_both_Output_2_U_vld_out),
    .ack_out(Output_2_TREADY),
    .apdone_blk(regslice_both_Output_2_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_3_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2101_1_fu_251_p1),
    .vld_in(Output_3_TVALID_int_regslice),
    .ack_in(Output_3_TREADY_int_regslice),
    .data_out(Output_3_TDATA),
    .vld_out(regslice_both_Output_3_U_vld_out),
    .ack_out(Output_3_TREADY),
    .apdone_blk(regslice_both_Output_3_U_apdone_blk)
);

sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_4_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2101_1_fu_251_p1),
    .vld_in(Output_4_TVALID_int_regslice),
    .ack_in(Output_4_TREADY_int_regslice),
    .data_out(Output_4_TDATA),
    .vld_out(regslice_both_Output_4_U_vld_out),
    .ack_out(Output_4_TREADY),
    .apdone_blk(regslice_both_Output_4_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1695_reg_259 <= icmp_ln1695_fu_181_p2;
        icmp_ln1696_reg_265 <= icmp_ln1696_fu_187_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_1_TDATA_blk_n = Input_1_TVALID_int_regslice;
    end else begin
        Input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_2_TDATA_blk_n = Input_2_TVALID_int_regslice;
    end else begin
        Input_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_3_TDATA_blk_n = Input_3_TVALID_int_regslice;
    end else begin
        Input_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_3_TREADY_int_regslice = 1'b1;
    end else begin
        Input_3_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_4_TDATA_blk_n = Input_4_TVALID_int_regslice;
    end else begin
        Input_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_4_TREADY_int_regslice = 1'b1;
    end else begin
        Input_4_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_TDATA_blk_n = Output_1_TREADY_int_regslice;
    end else begin
        Output_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Output_2_TDATA_blk_n = Output_2_TREADY_int_regslice;
    end else begin
        Output_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_2_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Output_3_TDATA_blk_n = Output_3_TREADY_int_regslice;
    end else begin
        Output_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_3_TVALID_int_regslice = 1'b1;
    end else begin
        Output_3_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Output_4_TDATA_blk_n = Output_4_TREADY_int_regslice;
    end else begin
        Output_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_4_TVALID_int_regslice = 1'b1;
    end else begin
        Output_4_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (regslice_both_Output_4_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | (regslice_both_Output_3_U_apdone_blk == 1'b1) | (regslice_both_Output_2_U_apdone_blk == 1'b1) | (regslice_both_Output_1_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (regslice_both_Output_4_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | (regslice_both_Output_3_U_apdone_blk == 1'b1) | (regslice_both_Output_2_U_apdone_blk == 1'b1) | (regslice_both_Output_1_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (regslice_both_Output_4_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | (regslice_both_Output_3_U_apdone_blk == 1'b1) | (regslice_both_Output_2_U_apdone_blk == 1'b1) | (regslice_both_Output_1_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lut_i_ce0 = 1'b1;
    end else begin
        lut_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (regslice_both_Output_4_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | (regslice_both_Output_3_U_apdone_blk == 1'b1) | (regslice_both_Output_2_U_apdone_blk == 1'b1) | (regslice_both_Output_1_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_TREADY = regslice_both_Input_1_U_ack_in;

assign Input_2_TREADY = regslice_both_Input_2_U_ack_in;

assign Input_3_TREADY = regslice_both_Input_3_U_ack_in;

assign Input_4_TREADY = regslice_both_Input_4_U_ack_in;

assign Output_1_TVALID = regslice_both_Output_1_U_vld_out;

assign Output_2_TVALID = regslice_both_Output_2_U_vld_out;

assign Output_3_TVALID = regslice_both_Output_3_U_vld_out;

assign Output_4_TVALID = regslice_both_Output_4_U_vld_out;

assign add_ln2095_fu_175_p2 = (add_ln859_3_fu_163_p2 + add_ln859_2_fu_157_p2);

assign add_ln859_1_fu_151_p2 = (Input_2_TDATA_int_regslice + Input_4_TDATA_int_regslice);

assign add_ln859_2_fu_157_p2 = (trunc_ln859_1_fu_133_p1 + trunc_ln859_fu_129_p1);

assign add_ln859_3_fu_163_p2 = (trunc_ln859_3_fu_147_p1 + trunc_ln859_2_fu_143_p1);

assign add_ln859_fu_137_p2 = (Input_1_TDATA_int_regslice + Input_3_TDATA_int_regslice);

assign and_ln1696_fu_225_p2 = (xor_ln1695_fu_220_p2 & icmp_ln1696_reg_265);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_4_TVALID_int_regslice) | (1'b0 == Input_3_TVALID_int_regslice) | (1'b0 == Input_2_TVALID_int_regslice) | (1'b0 == Input_1_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice) | (regslice_both_Output_4_U_apdone_blk == 1'b1) | (regslice_both_Output_3_U_apdone_blk == 1'b1) | (regslice_both_Output_2_U_apdone_blk == 1'b1) | (regslice_both_Output_1_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == Output_4_TREADY_int_regslice) | (1'b0 == Output_3_TREADY_int_regslice) | (1'b0 == Output_2_TREADY_int_regslice) | (1'b0 == Output_1_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exponent_V_fu_169_p2 = (add_ln859_1_fu_151_p2 + add_ln859_fu_137_p2);

assign icmp_ln1695_fu_181_p2 = (($signed(exponent_V_fu_169_p2) > $signed(32'd2097152)) ? 1'b1 : 1'b0);

assign icmp_ln1696_fu_187_p2 = (($signed(exponent_V_fu_169_p2) < $signed(32'd4292870144)) ? 1'b1 : 1'b0);

assign index_V_fu_193_p4 = {{add_ln2095_fu_175_p2[21:11]}};

assign lut_i_address0 = zext_ln587_fu_203_p1;

assign or_ln1696_fu_238_p2 = (icmp_ln1695_reg_259 | and_ln1696_fu_225_p2);

assign result_V_2_fu_243_p3 = ((or_ln1696_fu_238_p2[0:0] == 1'b1) ? select_ln1696_fu_230_p3 : zext_ln2101_fu_216_p1);

assign result_V_fu_208_p3 = {{lut_i_q0}, {9'd0}};

assign select_ln1696_fu_230_p3 = ((and_ln1696_fu_225_p2[0:0] == 1'b1) ? 20'd0 : 20'd524288);

assign trunc_ln859_1_fu_133_p1 = Input_1_TDATA_int_regslice[21:0];

assign trunc_ln859_2_fu_143_p1 = Input_4_TDATA_int_regslice[21:0];

assign trunc_ln859_3_fu_147_p1 = Input_2_TDATA_int_regslice[21:0];

assign trunc_ln859_fu_129_p1 = Input_3_TDATA_int_regslice[21:0];

assign xor_ln1695_fu_220_p2 = (icmp_ln1695_reg_259 ^ 1'd1);

assign zext_ln2101_1_fu_251_p1 = result_V_2_fu_243_p3;

assign zext_ln2101_fu_216_p1 = result_V_fu_208_p3;

assign zext_ln587_fu_203_p1 = index_V_fu_193_p4;

endmodule //sigmoid
