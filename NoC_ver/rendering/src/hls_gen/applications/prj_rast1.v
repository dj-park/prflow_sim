// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="prj_rast1_prj_rast1,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.593125,HLS_SYN_LAT=11,HLS_SYN_TPT=10,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=752,HLS_SYN_LUT=3585,HLS_VERSION=2022_1}" *)

module prj_rast1 (
        Input_1_TDATA,
        Output_1_TDATA,
        ap_clk,
        ap_rst_n,
        Input_1_TVALID,
        Input_1_TREADY,
        ap_start,
        Output_1_TVALID,
        Output_1_TREADY,
        ap_done,
        ap_ready,
        ap_idle
);


input  [255:0] Input_1_TDATA;
output  [31:0] Output_1_TDATA;
input   ap_clk;
input   ap_rst_n;
input   Input_1_TVALID;
output   Input_1_TREADY;
input   ap_start;
output   Output_1_TVALID;
input   Output_1_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;

 reg    ap_rst_n_inv;
wire    data_transfer_U0_ap_start;
wire    data_transfer_U0_ap_done;
wire    data_transfer_U0_ap_continue;
wire    data_transfer_U0_ap_idle;
wire    data_transfer_U0_ap_ready;
wire    data_transfer_U0_start_out;
wire    data_transfer_U0_start_write;
wire    data_transfer_U0_Input_1_TREADY;
wire   [127:0] data_transfer_U0_data_transfer_out_din;
wire    data_transfer_U0_data_transfer_out_write;
wire    p_r1_module_U0_ap_start;
wire    p_r1_module_U0_ap_done;
wire    p_r1_module_U0_ap_continue;
wire    p_r1_module_U0_ap_idle;
wire    p_r1_module_U0_ap_ready;
wire   [31:0] p_r1_module_U0_Output_1_TDATA;
wire    p_r1_module_U0_Output_1_TVALID;
wire    p_r1_module_U0_data_transfer_out_read;
wire    data_transfer_out_full_n;
wire   [127:0] data_transfer_out_dout;
wire   [1:0] data_transfer_out_num_data_valid;
wire   [1:0] data_transfer_out_fifo_cap;
wire    data_transfer_out_empty_n;
wire   [0:0] start_for_p_r1_module_U0_din;
wire    start_for_p_r1_module_U0_full_n;
wire   [0:0] start_for_p_r1_module_U0_dout;
wire    start_for_p_r1_module_U0_empty_n;

prj_rast1_data_transfer data_transfer_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(data_transfer_U0_ap_start),
    .start_full_n(start_for_p_r1_module_U0_full_n),
    .ap_done(data_transfer_U0_ap_done),
    .ap_continue(data_transfer_U0_ap_continue),
    .ap_idle(data_transfer_U0_ap_idle),
    .ap_ready(data_transfer_U0_ap_ready),
    .start_out(data_transfer_U0_start_out),
    .start_write(data_transfer_U0_start_write),
    .Input_1_TDATA(Input_1_TDATA),
    .Input_1_TVALID(Input_1_TVALID),
    .Input_1_TREADY(data_transfer_U0_Input_1_TREADY),
    .data_transfer_out_din(data_transfer_U0_data_transfer_out_din),
    .data_transfer_out_num_data_valid(data_transfer_out_num_data_valid),
    .data_transfer_out_fifo_cap(data_transfer_out_fifo_cap),
    .data_transfer_out_full_n(data_transfer_out_full_n),
    .data_transfer_out_write(data_transfer_U0_data_transfer_out_write)
);

prj_rast1_p_r1_module p_r1_module_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(p_r1_module_U0_ap_start),
    .ap_done(p_r1_module_U0_ap_done),
    .ap_continue(p_r1_module_U0_ap_continue),
    .ap_idle(p_r1_module_U0_ap_idle),
    .ap_ready(p_r1_module_U0_ap_ready),
    .Output_1_TDATA(p_r1_module_U0_Output_1_TDATA),
    .Output_1_TVALID(p_r1_module_U0_Output_1_TVALID),
    .Output_1_TREADY(Output_1_TREADY),
    .data_transfer_out_dout(data_transfer_out_dout),
    .data_transfer_out_num_data_valid(data_transfer_out_num_data_valid),
    .data_transfer_out_fifo_cap(data_transfer_out_fifo_cap),
    .data_transfer_out_empty_n(data_transfer_out_empty_n),
    .data_transfer_out_read(p_r1_module_U0_data_transfer_out_read)
);

prj_rast1_fifo_w128_d2_S data_transfer_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_transfer_U0_data_transfer_out_din),
    .if_full_n(data_transfer_out_full_n),
    .if_write(data_transfer_U0_data_transfer_out_write),
    .if_dout(data_transfer_out_dout),
    .if_num_data_valid(data_transfer_out_num_data_valid),
    .if_fifo_cap(data_transfer_out_fifo_cap),
    .if_empty_n(data_transfer_out_empty_n),
    .if_read(p_r1_module_U0_data_transfer_out_read)
);

prj_rast1_start_for_p_r1_module_U0 start_for_p_r1_module_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_p_r1_module_U0_din),
    .if_full_n(start_for_p_r1_module_U0_full_n),
    .if_write(data_transfer_U0_start_write),
    .if_dout(start_for_p_r1_module_U0_dout),
    .if_empty_n(start_for_p_r1_module_U0_empty_n),
    .if_read(p_r1_module_U0_ap_ready)
);

assign Input_1_TREADY = data_transfer_U0_Input_1_TREADY;

assign Output_1_TDATA = p_r1_module_U0_Output_1_TDATA;

assign Output_1_TVALID = p_r1_module_U0_Output_1_TVALID;

assign ap_done = p_r1_module_U0_ap_done;

assign ap_idle = (p_r1_module_U0_ap_idle & data_transfer_U0_ap_idle);

assign ap_ready = data_transfer_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_transfer_U0_ap_continue = 1'b1;

assign data_transfer_U0_ap_start = ap_start;

assign p_r1_module_U0_ap_continue = 1'b1;

assign p_r1_module_U0_ap_start = start_for_p_r1_module_U0_empty_n;

assign start_for_p_r1_module_U0_din = 1'b1;

endmodule //prj_rast1
