// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_redir_m_rasterization1_even_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0,
        triangle_2d_y0,
        triangle_2d_x1,
        triangle_2d_y1,
        triangle_2d_x2,
        triangle_2d_y2,
        triangle_2d_z,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0;
input  [7:0] triangle_2d_y0;
input  [7:0] triangle_2d_x1;
input  [7:0] triangle_2d_y1;
input  [7:0] triangle_2d_x2;
input  [7:0] triangle_2d_y2;
input  [7:0] triangle_2d_z;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Output_2_V_TDATA;
reg Output_2_V_TVALID;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] max_index_V_1;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_2;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V_9;
reg   [7:0] max_min_V_8;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln310_fu_185_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [17:0] ret_37_fu_141_p2;
reg   [17:0] ret_37_reg_578;
wire   [17:0] ret_40_fu_175_p2;
reg   [17:0] ret_40_reg_584;
wire   [7:0] triangle_2d_same_y1_V_fu_197_p3;
reg   [7:0] triangle_2d_same_y1_V_reg_598;
wire   [7:0] triangle_2d_same_y0_V_fu_209_p3;
reg   [7:0] triangle_2d_same_y0_V_reg_609;
wire   [7:0] rhs_11_fu_251_p3;
reg   [7:0] rhs_11_reg_619;
wire   [7:0] lhs_11_fu_295_p3;
reg   [7:0] lhs_11_reg_625;
wire   [7:0] rhs_12_fu_346_p3;
reg   [7:0] rhs_12_reg_631;
wire   [7:0] lhs_12_fu_384_p3;
reg   [7:0] lhs_12_reg_637;
wire   [7:0] trunc_ln223_fu_419_p1;
reg   [7:0] trunc_ln223_reg_643;
wire   [15:0] mul_ln223_fu_449_p2;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [31:0] p_Result_7_fu_309_p5;
wire   [31:0] p_Result_8_fu_398_p5;
wire   [31:0] p_Result_9_fu_461_p4;
wire   [31:0] p_Result_10_fu_470_p5;
wire   [31:0] p_Result_s_fu_492_p4;
wire   [31:0] p_Result_6_fu_515_p5;
wire   [8:0] zext_ln225_fu_105_p1;
wire   [8:0] zext_ln1526_fu_109_p1;
wire   [8:0] zext_ln225_6_fu_119_p1;
wire   [8:0] zext_ln1526_4_fu_123_p1;
wire  signed [8:0] ret_35_fu_113_p2;
wire  signed [8:0] ret_36_fu_127_p2;
wire   [8:0] zext_ln1526_5_fu_147_p1;
wire   [8:0] zext_ln1526_6_fu_157_p1;
wire  signed [8:0] ret_38_fu_151_p2;
wire  signed [8:0] ret_39_fu_161_p2;
wire   [17:0] ret_fu_181_p2;
wire   [0:0] tmp_fu_189_p3;
wire   [7:0] triangle_2d_same_x0_V_fu_215_p3;
wire   [7:0] triangle_2d_same_x1_V_fu_203_p3;
wire   [0:0] icmp_ln1057_6_fu_227_p2;
wire   [0:0] icmp_ln1057_7_fu_239_p2;
wire   [0:0] icmp_ln1057_fu_221_p2;
wire   [7:0] select_ln35_fu_232_p3;
wire   [7:0] select_ln42_fu_244_p3;
wire   [0:0] icmp_ln1065_6_fu_271_p2;
wire   [0:0] icmp_ln1065_7_fu_283_p2;
wire   [0:0] icmp_ln1065_fu_265_p2;
wire   [7:0] select_ln55_fu_276_p3;
wire   [7:0] select_ln62_fu_288_p3;
wire   [0:0] icmp_ln1057_9_fu_326_p2;
wire   [0:0] icmp_ln1057_10_fu_336_p2;
wire   [0:0] icmp_ln1057_8_fu_322_p2;
wire   [7:0] select_ln35_2_fu_330_p3;
wire   [7:0] select_ln42_2_fu_340_p3;
wire   [0:0] icmp_ln1065_9_fu_364_p2;
wire   [0:0] icmp_ln1065_10_fu_374_p2;
wire   [0:0] icmp_ln1065_8_fu_360_p2;
wire   [7:0] select_ln55_2_fu_368_p3;
wire   [7:0] select_ln62_2_fu_378_p3;
wire   [8:0] zext_ln225_7_fu_407_p1;
wire   [8:0] zext_ln225_8_fu_410_p1;
wire  signed [8:0] ret_33_fu_413_p2;
wire   [8:0] zext_ln225_9_fu_429_p1;
wire   [8:0] zext_ln225_10_fu_432_p1;
wire  signed [8:0] ret_34_fu_435_p2;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 max_index_V_1 = 16'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V_9 = 8'd0;
#0 max_min_V_8 = 8'd0;
end

data_redir_m_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U27(
    .din0(ret_35_fu_113_p2),
    .din1(ret_36_fu_127_p2),
    .dout(ret_37_fu_141_p2)
);

data_redir_m_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U28(
    .din0(ret_38_fu_151_p2),
    .din1(ret_39_fu_161_p2),
    .dout(ret_40_fu_175_p2)
);

data_redir_m_mul_9s_9s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9s_9s_16_1_1_U29(
    .din0(ret_33_fu_413_p2),
    .din1(ret_34_fu_435_p2),
    .dout(mul_ln223_fu_449_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lhs_11_reg_625 <= lhs_11_fu_295_p3;
        rhs_11_reg_619 <= rhs_11_fu_251_p3;
        triangle_2d_same_y0_V_reg_609 <= triangle_2d_same_y0_V_fu_209_p3;
        triangle_2d_same_y1_V_reg_598 <= triangle_2d_same_y1_V_fu_197_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lhs_12_reg_637 <= lhs_12_fu_384_p3;
        rhs_12_reg_631 <= rhs_12_fu_346_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_2_V_TREADY))) begin
        max_index_V_1 <= mul_ln223_fu_449_p2;
        max_min_V_8 <= trunc_ln223_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_2_V_TREADY))) begin
        max_min_V_1 <= rhs_12_fu_346_p3;
        max_min_V_9 <= lhs_12_fu_384_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_min_V_2 <= lhs_11_fu_295_p3;
        max_min_V_3 <= rhs_11_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ret_37_reg_578 <= ret_37_fu_141_p2;
        ret_40_reg_584 <= ret_40_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln223_reg_643 <= trunc_ln223_fu_419_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = p_Result_6_fu_515_p5;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = p_Result_s_fu_492_p4;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = p_Result_10_fu_470_p5;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = p_Result_9_fu_461_p4;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_2_V_TREADY))) begin
        Output_2_V_TDATA = p_Result_8_fu_398_p5;
    end else if ((~(((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_2_V_TDATA = 32'd1;
    end else if ((~(((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_2_V_TDATA = p_Result_7_fu_309_p5;
    end else begin
        Output_2_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_2_V_TREADY)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_2_V_TREADY)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_2_V_TREADY)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_2_V_TREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_2_V_TREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_2_V_TREADY)) | (~((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Output_2_V_TVALID = 1'b1;
    end else begin
        Output_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Output_2_V_TREADY)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY))) & (icmp_ln310_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_2_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = (((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY)));
end

always @ (*) begin
    ap_block_state2_io = (((icmp_ln310_fu_185_p2 == 1'd0) & (1'b0 == Output_2_V_TREADY)) | ((icmp_ln310_fu_185_p2 == 1'd1) & (1'b0 == Output_2_V_TREADY)));
end

assign icmp_ln1057_10_fu_336_p2 = ((triangle_2d_same_y1_V_reg_598 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1057_6_fu_227_p2 = ((triangle_2d_same_x0_V_fu_215_p3 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1057_7_fu_239_p2 = ((triangle_2d_same_x1_V_fu_203_p3 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1057_8_fu_322_p2 = ((triangle_2d_same_y0_V_reg_609 < triangle_2d_same_y1_V_reg_598) ? 1'b1 : 1'b0);

assign icmp_ln1057_9_fu_326_p2 = ((triangle_2d_same_y0_V_reg_609 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_221_p2 = ((triangle_2d_same_x0_V_fu_215_p3 < triangle_2d_same_x1_V_fu_203_p3) ? 1'b1 : 1'b0);

assign icmp_ln1065_10_fu_374_p2 = ((triangle_2d_same_y1_V_reg_598 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1065_6_fu_271_p2 = ((triangle_2d_same_x0_V_fu_215_p3 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1065_7_fu_283_p2 = ((triangle_2d_same_x1_V_fu_203_p3 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1065_8_fu_360_p2 = ((triangle_2d_same_y0_V_reg_609 > triangle_2d_same_y1_V_reg_598) ? 1'b1 : 1'b0);

assign icmp_ln1065_9_fu_364_p2 = ((triangle_2d_same_y0_V_reg_609 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_265_p2 = ((triangle_2d_same_x0_V_fu_215_p3 > triangle_2d_same_x1_V_fu_203_p3) ? 1'b1 : 1'b0);

assign icmp_ln310_fu_185_p2 = ((ret_37_reg_578 == ret_40_reg_584) ? 1'b1 : 1'b0);

assign lhs_11_fu_295_p3 = ((icmp_ln1065_fu_265_p2[0:0] == 1'b1) ? select_ln55_fu_276_p3 : select_ln62_fu_288_p3);

assign lhs_12_fu_384_p3 = ((icmp_ln1065_8_fu_360_p2[0:0] == 1'b1) ? select_ln55_2_fu_368_p3 : select_ln62_2_fu_378_p3);

assign p_Result_10_fu_470_p5 = {{{{{{8'd0}, {trunc_ln223_reg_643}}}, {lhs_12_reg_637}}}, {rhs_12_reg_631}};

assign p_Result_6_fu_515_p5 = {{{{{{8'd0}, {max_min_V_8}}}, {max_min_V_9}}}, {max_min_V_1}};

assign p_Result_7_fu_309_p5 = {{{{triangle_2d_same_x1_V_fu_203_p3}, {triangle_2d_same_y0_V_fu_209_p3}}, {triangle_2d_same_x0_V_fu_215_p3}}, {8'd0}};

assign p_Result_8_fu_398_p5 = {{{{triangle_2d_z}, {triangle_2d_y2}}, {triangle_2d_x2}}, {triangle_2d_same_y1_V_reg_598}};

assign p_Result_9_fu_461_p4 = {{{lhs_11_reg_625}, {rhs_11_reg_619}}, {mul_ln223_fu_449_p2}};

assign p_Result_s_fu_492_p4 = {{{max_min_V_2}, {max_min_V_3}}, {max_index_V_1}};

assign ret_33_fu_413_p2 = (zext_ln225_7_fu_407_p1 - zext_ln225_8_fu_410_p1);

assign ret_34_fu_435_p2 = (zext_ln225_9_fu_429_p1 - zext_ln225_10_fu_432_p1);

assign ret_35_fu_113_p2 = (zext_ln225_fu_105_p1 - zext_ln1526_fu_109_p1);

assign ret_36_fu_127_p2 = (zext_ln225_6_fu_119_p1 - zext_ln1526_4_fu_123_p1);

assign ret_38_fu_151_p2 = (zext_ln1526_5_fu_147_p1 - zext_ln1526_4_fu_123_p1);

assign ret_39_fu_161_p2 = (zext_ln1526_6_fu_157_p1 - zext_ln1526_fu_109_p1);

assign ret_fu_181_p2 = (ret_37_reg_578 - ret_40_reg_584);

assign rhs_11_fu_251_p3 = ((icmp_ln1057_fu_221_p2[0:0] == 1'b1) ? select_ln35_fu_232_p3 : select_ln42_fu_244_p3);

assign rhs_12_fu_346_p3 = ((icmp_ln1057_8_fu_322_p2[0:0] == 1'b1) ? select_ln35_2_fu_330_p3 : select_ln42_2_fu_340_p3);

assign select_ln35_2_fu_330_p3 = ((icmp_ln1057_9_fu_326_p2[0:0] == 1'b1) ? triangle_2d_same_y0_V_reg_609 : triangle_2d_y2);

assign select_ln35_fu_232_p3 = ((icmp_ln1057_6_fu_227_p2[0:0] == 1'b1) ? triangle_2d_same_x0_V_fu_215_p3 : triangle_2d_x2);

assign select_ln42_2_fu_340_p3 = ((icmp_ln1057_10_fu_336_p2[0:0] == 1'b1) ? triangle_2d_same_y1_V_reg_598 : triangle_2d_y2);

assign select_ln42_fu_244_p3 = ((icmp_ln1057_7_fu_239_p2[0:0] == 1'b1) ? triangle_2d_same_x1_V_fu_203_p3 : triangle_2d_x2);

assign select_ln55_2_fu_368_p3 = ((icmp_ln1065_9_fu_364_p2[0:0] == 1'b1) ? triangle_2d_same_y0_V_reg_609 : triangle_2d_y2);

assign select_ln55_fu_276_p3 = ((icmp_ln1065_6_fu_271_p2[0:0] == 1'b1) ? triangle_2d_same_x0_V_fu_215_p3 : triangle_2d_x2);

assign select_ln62_2_fu_378_p3 = ((icmp_ln1065_10_fu_374_p2[0:0] == 1'b1) ? triangle_2d_same_y1_V_reg_598 : triangle_2d_y2);

assign select_ln62_fu_288_p3 = ((icmp_ln1065_7_fu_283_p2[0:0] == 1'b1) ? triangle_2d_same_x1_V_fu_203_p3 : triangle_2d_x2);

assign tmp_fu_189_p3 = ret_fu_181_p2[32'd17];

assign triangle_2d_same_x0_V_fu_215_p3 = ((tmp_fu_189_p3[0:0] == 1'b1) ? triangle_2d_x1 : triangle_2d_x0);

assign triangle_2d_same_x1_V_fu_203_p3 = ((tmp_fu_189_p3[0:0] == 1'b1) ? triangle_2d_x0 : triangle_2d_x1);

assign triangle_2d_same_y0_V_fu_209_p3 = ((tmp_fu_189_p3[0:0] == 1'b1) ? triangle_2d_y1 : triangle_2d_y0);

assign triangle_2d_same_y1_V_fu_197_p3 = ((tmp_fu_189_p3[0:0] == 1'b1) ? triangle_2d_y0 : triangle_2d_y1);

assign trunc_ln223_fu_419_p1 = ret_33_fu_413_p2[7:0];

assign zext_ln1526_4_fu_123_p1 = triangle_2d_y0;

assign zext_ln1526_5_fu_147_p1 = triangle_2d_y2;

assign zext_ln1526_6_fu_157_p1 = triangle_2d_x1;

assign zext_ln1526_fu_109_p1 = triangle_2d_x0;

assign zext_ln225_10_fu_432_p1 = rhs_12_reg_631;

assign zext_ln225_6_fu_119_p1 = triangle_2d_y1;

assign zext_ln225_7_fu_407_p1 = lhs_11_reg_625;

assign zext_ln225_8_fu_410_p1 = rhs_11_reg_619;

assign zext_ln225_9_fu_429_p1 = lhs_12_reg_637;

assign zext_ln225_fu_105_p1 = triangle_2d_x2;

endmodule //data_redir_m_rasterization1_even_m
