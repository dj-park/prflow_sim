// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_data_transfer_Pipeline_VITIS_LOOP_18_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_1_V_TREADY,
        tmp_1,
        Output_1_V_TDATA,
        Output_1_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   Output_1_V_TREADY;
input  [511:0] tmp_1;
output  [127:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;

reg ap_idle;
reg Output_1_V_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln18_fu_89_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Output_1_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] mul_fu_105_p3;
reg   [8:0] mul_reg_575;
wire   [8:0] or_ln21_fu_113_p2;
reg   [8:0] or_ln21_reg_580;
wire   [0:0] icmp_ln674_fu_119_p2;
reg   [0:0] icmp_ln674_reg_585;
wire   [8:0] or_ln21_1_fu_125_p2;
reg   [8:0] or_ln21_1_reg_592;
wire   [8:0] or_ln21_4_fu_131_p2;
reg   [8:0] or_ln21_4_reg_597;
wire   [0:0] icmp_ln674_1_fu_137_p2;
reg   [0:0] icmp_ln674_1_reg_602;
wire   [8:0] or_ln21_5_fu_143_p2;
reg   [8:0] or_ln21_5_reg_609;
wire   [8:0] or_ln21_2_fu_149_p2;
reg   [8:0] or_ln21_2_reg_614;
wire   [0:0] icmp_ln674_2_fu_155_p2;
reg   [0:0] icmp_ln674_2_reg_619;
wire   [8:0] or_ln21_6_fu_161_p2;
reg   [8:0] or_ln21_6_reg_626;
wire   [8:0] or_ln21_3_fu_167_p2;
reg   [8:0] or_ln21_3_reg_631;
wire   [0:0] icmp_ln674_3_fu_173_p2;
reg   [0:0] icmp_ln674_3_reg_636;
reg   [2:0] j_fu_64;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
wire   [2:0] j_2_fu_95_p2;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] empty_10_fu_101_p1;
wire   [9:0] zext_ln674_fu_184_p1;
wire   [9:0] zext_ln674_1_fu_187_p1;
wire   [9:0] sub_ln674_fu_199_p2;
wire   [9:0] sub_ln674_1_fu_211_p2;
reg   [511:0] tmp_fu_190_p4;
wire   [9:0] xor_ln674_fu_205_p2;
wire   [9:0] select_ln674_fu_217_p3;
wire   [9:0] select_ln674_2_fu_230_p3;
wire   [9:0] sub_ln674_2_fu_237_p2;
wire   [511:0] select_ln674_1_fu_224_p3;
wire   [511:0] zext_ln674_2_fu_243_p1;
wire   [511:0] zext_ln674_3_fu_247_p1;
wire   [511:0] lshr_ln674_fu_251_p2;
wire   [511:0] lshr_ln674_1_fu_257_p2;
wire   [511:0] and_ln674_fu_263_p2;
wire   [9:0] zext_ln674_4_fu_273_p1;
wire   [9:0] zext_ln674_5_fu_276_p1;
wire   [9:0] sub_ln674_3_fu_288_p2;
wire   [9:0] sub_ln674_4_fu_300_p2;
reg   [511:0] tmp_2_fu_279_p4;
wire   [9:0] xor_ln674_1_fu_294_p2;
wire   [9:0] select_ln674_3_fu_306_p3;
wire   [9:0] select_ln674_5_fu_319_p3;
wire   [9:0] sub_ln674_5_fu_326_p2;
wire   [511:0] select_ln674_4_fu_313_p3;
wire   [511:0] zext_ln674_6_fu_332_p1;
wire   [511:0] zext_ln674_7_fu_336_p1;
wire   [511:0] lshr_ln674_2_fu_340_p2;
wire   [511:0] lshr_ln674_3_fu_346_p2;
wire   [511:0] and_ln674_1_fu_352_p2;
wire   [9:0] zext_ln674_8_fu_362_p1;
wire   [9:0] zext_ln674_9_fu_365_p1;
wire   [9:0] sub_ln674_6_fu_377_p2;
wire   [9:0] sub_ln674_7_fu_389_p2;
reg   [511:0] tmp_3_fu_368_p4;
wire   [9:0] xor_ln674_2_fu_383_p2;
wire   [9:0] select_ln674_6_fu_395_p3;
wire   [9:0] select_ln674_8_fu_408_p3;
wire   [9:0] sub_ln674_8_fu_415_p2;
wire   [511:0] select_ln674_7_fu_402_p3;
wire   [511:0] zext_ln674_10_fu_421_p1;
wire   [511:0] zext_ln674_11_fu_425_p1;
wire   [511:0] lshr_ln674_4_fu_429_p2;
wire   [511:0] lshr_ln674_5_fu_435_p2;
wire   [511:0] and_ln674_2_fu_441_p2;
wire   [9:0] zext_ln674_12_fu_451_p1;
wire   [9:0] zext_ln674_13_fu_454_p1;
wire   [9:0] sub_ln674_9_fu_466_p2;
wire   [9:0] sub_ln674_10_fu_478_p2;
reg   [511:0] tmp_4_fu_457_p4;
wire   [9:0] xor_ln674_3_fu_472_p2;
wire   [9:0] select_ln674_9_fu_484_p3;
wire   [9:0] select_ln674_11_fu_497_p3;
wire   [9:0] sub_ln674_11_fu_504_p2;
wire   [511:0] select_ln674_10_fu_491_p3;
wire   [511:0] zext_ln674_14_fu_510_p1;
wire   [511:0] zext_ln674_15_fu_514_p1;
wire   [511:0] lshr_ln674_6_fu_518_p2;
wire   [511:0] lshr_ln674_7_fu_524_p2;
wire   [511:0] and_ln674_3_fu_530_p2;
wire   [31:0] trunc_ln225_3_fu_536_p1;
wire   [31:0] trunc_ln225_2_fu_447_p1;
wire   [31:0] trunc_ln225_1_fu_358_p1;
wire   [31:0] trunc_ln225_fu_269_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

data_transfer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_89_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_64 <= j_2_fu_95_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_64 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_89_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln674_1_reg_602 <= icmp_ln674_1_fu_137_p2;
        icmp_ln674_2_reg_619 <= icmp_ln674_2_fu_155_p2;
        icmp_ln674_3_reg_636 <= icmp_ln674_3_fu_173_p2;
        icmp_ln674_reg_585 <= icmp_ln674_fu_119_p2;
        mul_reg_575[8 : 7] <= mul_fu_105_p3[8 : 7];
        or_ln21_1_reg_592[8 : 7] <= or_ln21_1_fu_125_p2[8 : 7];
        or_ln21_2_reg_614[8 : 7] <= or_ln21_2_fu_149_p2[8 : 7];
        or_ln21_3_reg_631[8 : 7] <= or_ln21_3_fu_167_p2[8 : 7];
        or_ln21_4_reg_597[8 : 7] <= or_ln21_4_fu_131_p2[8 : 7];
        or_ln21_5_reg_609[8 : 7] <= or_ln21_5_fu_143_p2[8 : 7];
        or_ln21_6_reg_626[8 : 7] <= or_ln21_6_fu_161_p2[8 : 7];
        or_ln21_reg_580[8 : 7] <= or_ln21_fu_113_p2[8 : 7];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Output_1_V_TVALID = 1'b1;
    end else begin
        Output_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_89_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_TDATA = {{{{trunc_ln225_3_fu_536_p1}, {trunc_ln225_2_fu_447_p1}}, {trunc_ln225_1_fu_358_p1}}, {trunc_ln225_fu_269_p1}};

assign and_ln674_1_fu_352_p2 = (lshr_ln674_3_fu_346_p2 & lshr_ln674_2_fu_340_p2);

assign and_ln674_2_fu_441_p2 = (lshr_ln674_5_fu_435_p2 & lshr_ln674_4_fu_429_p2);

assign and_ln674_3_fu_530_p2 = (lshr_ln674_7_fu_524_p2 & lshr_ln674_6_fu_518_p2);

assign and_ln674_fu_263_p2 = (lshr_ln674_fu_251_p2 & lshr_ln674_1_fu_257_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == Output_1_V_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Output_1_V_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Output_1_V_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == Output_1_V_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_10_fu_101_p1 = ap_sig_allocacmp_j_1[1:0];

assign icmp_ln18_fu_89_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_137_p2 = ((or_ln21_1_fu_125_p2 > or_ln21_4_fu_131_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_2_fu_155_p2 = ((or_ln21_5_fu_143_p2 > or_ln21_2_fu_149_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_3_fu_173_p2 = ((or_ln21_6_fu_161_p2 > or_ln21_3_fu_167_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_119_p2 = ((mul_fu_105_p3 > or_ln21_fu_113_p2) ? 1'b1 : 1'b0);

assign j_2_fu_95_p2 = (ap_sig_allocacmp_j_1 + 3'd1);

assign lshr_ln674_1_fu_257_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_3_fu_247_p1;

assign lshr_ln674_2_fu_340_p2 = select_ln674_4_fu_313_p3 >> zext_ln674_6_fu_332_p1;

assign lshr_ln674_3_fu_346_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_7_fu_336_p1;

assign lshr_ln674_4_fu_429_p2 = select_ln674_7_fu_402_p3 >> zext_ln674_10_fu_421_p1;

assign lshr_ln674_5_fu_435_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_11_fu_425_p1;

assign lshr_ln674_6_fu_518_p2 = select_ln674_10_fu_491_p3 >> zext_ln674_14_fu_510_p1;

assign lshr_ln674_7_fu_524_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_15_fu_514_p1;

assign lshr_ln674_fu_251_p2 = select_ln674_1_fu_224_p3 >> zext_ln674_2_fu_243_p1;

assign mul_fu_105_p3 = {{empty_10_fu_101_p1}, {7'd0}};

assign or_ln21_1_fu_125_p2 = (mul_fu_105_p3 | 9'd32);

assign or_ln21_2_fu_149_p2 = (mul_fu_105_p3 | 9'd95);

assign or_ln21_3_fu_167_p2 = (mul_fu_105_p3 | 9'd127);

assign or_ln21_4_fu_131_p2 = (mul_fu_105_p3 | 9'd63);

assign or_ln21_5_fu_143_p2 = (mul_fu_105_p3 | 9'd64);

assign or_ln21_6_fu_161_p2 = (mul_fu_105_p3 | 9'd96);

assign or_ln21_fu_113_p2 = (mul_fu_105_p3 | 9'd31);

assign select_ln674_10_fu_491_p3 = ((icmp_ln674_3_reg_636[0:0] == 1'b1) ? tmp_4_fu_457_p4 : tmp_1);

assign select_ln674_11_fu_497_p3 = ((icmp_ln674_3_reg_636[0:0] == 1'b1) ? xor_ln674_3_fu_472_p2 : zext_ln674_12_fu_451_p1);

assign select_ln674_1_fu_224_p3 = ((icmp_ln674_reg_585[0:0] == 1'b1) ? tmp_fu_190_p4 : tmp_1);

assign select_ln674_2_fu_230_p3 = ((icmp_ln674_reg_585[0:0] == 1'b1) ? xor_ln674_fu_205_p2 : zext_ln674_fu_184_p1);

assign select_ln674_3_fu_306_p3 = ((icmp_ln674_1_reg_602[0:0] == 1'b1) ? sub_ln674_3_fu_288_p2 : sub_ln674_4_fu_300_p2);

assign select_ln674_4_fu_313_p3 = ((icmp_ln674_1_reg_602[0:0] == 1'b1) ? tmp_2_fu_279_p4 : tmp_1);

assign select_ln674_5_fu_319_p3 = ((icmp_ln674_1_reg_602[0:0] == 1'b1) ? xor_ln674_1_fu_294_p2 : zext_ln674_4_fu_273_p1);

assign select_ln674_6_fu_395_p3 = ((icmp_ln674_2_reg_619[0:0] == 1'b1) ? sub_ln674_6_fu_377_p2 : sub_ln674_7_fu_389_p2);

assign select_ln674_7_fu_402_p3 = ((icmp_ln674_2_reg_619[0:0] == 1'b1) ? tmp_3_fu_368_p4 : tmp_1);

assign select_ln674_8_fu_408_p3 = ((icmp_ln674_2_reg_619[0:0] == 1'b1) ? xor_ln674_2_fu_383_p2 : zext_ln674_8_fu_362_p1);

assign select_ln674_9_fu_484_p3 = ((icmp_ln674_3_reg_636[0:0] == 1'b1) ? sub_ln674_9_fu_466_p2 : sub_ln674_10_fu_478_p2);

assign select_ln674_fu_217_p3 = ((icmp_ln674_reg_585[0:0] == 1'b1) ? sub_ln674_fu_199_p2 : sub_ln674_1_fu_211_p2);

assign sub_ln674_10_fu_478_p2 = (zext_ln674_13_fu_454_p1 - zext_ln674_12_fu_451_p1);

assign sub_ln674_11_fu_504_p2 = (10'd511 - select_ln674_9_fu_484_p3);

assign sub_ln674_1_fu_211_p2 = (zext_ln674_1_fu_187_p1 - zext_ln674_fu_184_p1);

assign sub_ln674_2_fu_237_p2 = (10'd511 - select_ln674_fu_217_p3);

assign sub_ln674_3_fu_288_p2 = (zext_ln674_4_fu_273_p1 - zext_ln674_5_fu_276_p1);

assign sub_ln674_4_fu_300_p2 = (zext_ln674_5_fu_276_p1 - zext_ln674_4_fu_273_p1);

assign sub_ln674_5_fu_326_p2 = (10'd511 - select_ln674_3_fu_306_p3);

assign sub_ln674_6_fu_377_p2 = (zext_ln674_8_fu_362_p1 - zext_ln674_9_fu_365_p1);

assign sub_ln674_7_fu_389_p2 = (zext_ln674_9_fu_365_p1 - zext_ln674_8_fu_362_p1);

assign sub_ln674_8_fu_415_p2 = (10'd511 - select_ln674_6_fu_395_p3);

assign sub_ln674_9_fu_466_p2 = (zext_ln674_12_fu_451_p1 - zext_ln674_13_fu_454_p1);

assign sub_ln674_fu_199_p2 = (zext_ln674_fu_184_p1 - zext_ln674_1_fu_187_p1);

integer ap_tvar_int_0;

always @ (tmp_1) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_2_fu_279_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_279_p4[ap_tvar_int_0] = tmp_1[511 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (tmp_1) begin
    for (ap_tvar_int_1 = 512 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 511 - 0) begin
            tmp_3_fu_368_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_3_fu_368_p4[ap_tvar_int_1] = tmp_1[511 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (tmp_1) begin
    for (ap_tvar_int_2 = 512 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 511 - 0) begin
            tmp_4_fu_457_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_4_fu_457_p4[ap_tvar_int_2] = tmp_1[511 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (tmp_1) begin
    for (ap_tvar_int_3 = 512 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 511 - 0) begin
            tmp_fu_190_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_fu_190_p4[ap_tvar_int_3] = tmp_1[511 - ap_tvar_int_3];
        end
    end
end

assign trunc_ln225_1_fu_358_p1 = and_ln674_1_fu_352_p2[31:0];

assign trunc_ln225_2_fu_447_p1 = and_ln674_2_fu_441_p2[31:0];

assign trunc_ln225_3_fu_536_p1 = and_ln674_3_fu_530_p2[31:0];

assign trunc_ln225_fu_269_p1 = and_ln674_fu_263_p2[31:0];

assign xor_ln674_1_fu_294_p2 = (zext_ln674_4_fu_273_p1 ^ 10'd511);

assign xor_ln674_2_fu_383_p2 = (zext_ln674_8_fu_362_p1 ^ 10'd511);

assign xor_ln674_3_fu_472_p2 = (zext_ln674_12_fu_451_p1 ^ 10'd511);

assign xor_ln674_fu_205_p2 = (zext_ln674_fu_184_p1 ^ 10'd511);

assign zext_ln674_10_fu_421_p1 = select_ln674_8_fu_408_p3;

assign zext_ln674_11_fu_425_p1 = sub_ln674_8_fu_415_p2;

assign zext_ln674_12_fu_451_p1 = or_ln21_6_reg_626;

assign zext_ln674_13_fu_454_p1 = or_ln21_3_reg_631;

assign zext_ln674_14_fu_510_p1 = select_ln674_11_fu_497_p3;

assign zext_ln674_15_fu_514_p1 = sub_ln674_11_fu_504_p2;

assign zext_ln674_1_fu_187_p1 = or_ln21_reg_580;

assign zext_ln674_2_fu_243_p1 = select_ln674_2_fu_230_p3;

assign zext_ln674_3_fu_247_p1 = sub_ln674_2_fu_237_p2;

assign zext_ln674_4_fu_273_p1 = or_ln21_1_reg_592;

assign zext_ln674_5_fu_276_p1 = or_ln21_4_reg_597;

assign zext_ln674_6_fu_332_p1 = select_ln674_5_fu_319_p3;

assign zext_ln674_7_fu_336_p1 = sub_ln674_5_fu_326_p2;

assign zext_ln674_8_fu_362_p1 = or_ln21_5_reg_609;

assign zext_ln674_9_fu_365_p1 = or_ln21_2_reg_614;

assign zext_ln674_fu_184_p1 = mul_reg_575;

always @ (posedge ap_clk) begin
    mul_reg_575[6:0] <= 7'b0000000;
    or_ln21_reg_580[6:0] <= 7'b0011111;
    or_ln21_1_reg_592[6:0] <= 7'b0100000;
    or_ln21_4_reg_597[6:0] <= 7'b0111111;
    or_ln21_5_reg_609[6:0] <= 7'b1000000;
    or_ln21_2_reg_614[6:0] <= 7'b1011111;
    or_ln21_6_reg_626[6:0] <= 7'b1100000;
    or_ln21_3_reg_631[6:0] <= 7'b1111111;
end

endmodule //data_transfer_data_transfer_Pipeline_VITIS_LOOP_18_2
